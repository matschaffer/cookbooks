# Nagios Service Definitions.
#
# Automatically generated by Chef.

define service {
    use                 default-service
    hostgroup_name      all,!external,!routers
    service_description ping
    check_command       check_ping!200.0,20%!500.0,60%
}

# monitoring service checks
define service {
    service_description Nagios
    hostgroup_name      monitor
    check_command       check-nagios
    contact_groups      admins
    use                 default-service
}

# Uncomment if you're using Munin
#define service {
#    service_description Munin Client
#    hostgroup_name      all
#    check_command       check_tcp!4949
#    use                 default-service
#}

# default checks for all hosts
# Uncomment if you're running chef-client as a daemon
#define service {
#    service_description Chef Client
#    hostgroup_name      base
#    check_command    	  check_chef_client
#    use                 default-service
#}
#
<% unless @service_hosts['managed-node'].nil? %>
define service {
    service_description chef-client run status
    hostgroup_name      managed-node
    use                 default-service
    freshness_threshold 720
    active_checks_enabled 0
    check_freshness     1
    check_command    	  check_chef_client
    is_volatile            1
}

<% end %>
define service {
    service_description Free Space All Disks
    hostgroup_name      all,!external,!routers
    check_command    		check_all_disks
    use                 default-service
}

define service {
    service_description Load Average
    hostgroup_name      all,!external,!routers
    check_command			  check_load
    use                 default-service
}

define service {
    service_description Free Memory
    hostgroup_name      all,!external,!routers
    check_command    		check_mem
    use                 default-service
}

define service {
    service_description SSH
    hostgroup_name      all,!external,!routers
    check_command       check_ssh
    use                 default-service
}

define service {
    service_description Processes
    hostgroup_name      all,!external,!routers
    check_command       check_local_procs
    use                 default-service
}

<% unless @service_hosts['monitoring'].nil? -%>
# If the monitoring host is a postfix relay, uncomment this.
#define service {
#    service_description Postfix
#    hostgroup_name      monitoring
#    check_command       check_nrpe!check_smtp
#    use                 default-service
#}

# If the monitoring host is a syslog server, uncomment this.
#define service {
#    service_description Rsyslog
#    hostgroup_name      monitoring
#    check_command       check_tcp!514
#    use                 default-service
#}

<% end -%>
<% unless @service_hosts['solr-slave'].nil? -%>
  <% @service_hosts['solr-slave'].map{|n| n[:solr][:cores].keys}.flatten.uniq.each do |core| -%>
  define service {
      service_description Solr <%=core%> core index
      hostgroup_name      solr-slave
      check_command       check_solr_port!8080!/solr/<%=core%>
      use                 default-service
  }
  <% end -%>
<% end -%>
<% unless @service_hosts['webui-webservers'].nil? -%>
# basic web server http check
define service {
    service_description HTTP WebUI
    hostgroup_name      webui-webservers
    check_command	check_http_content!www.anyclip.com!/movies/recent!Recently added movies
    use                 default-service
    contact_groups      webui-admins,<%=node[:nagios][:default_contact_groups].join(',')%>
}

<% end -%>
<% unless @service_hosts['api-appservers'].nil? -%>
# basic check if appserver role is running unicorn
define service {
    service_description Tomcat API
    hostgroup_name      api-appservers
    check_command	check_http_content_port!apis.anyclip.com!8080!'/api/title/tWyTmZx3x/?cid=C9DX7VqQ&format=JSON&sig=66260cdf934b4157c7e5420bbe80f9a4f3f53878'!where-in-the-world-is-osama-bin-laden
    use                 default-service
    contact_groups      api-admins,<%=node[:nagios][:default_contact_groups].join(',')%>
}

<% end -%>
<% unless @service_hosts['web-backend'].nil? -%>
define service {
    service_description Memcached
    hostgroup_name      web-backend
    check_command       check_memcache
    use                 default-service
    contact_groups      <%=node[:nagios][:default_contact_groups].join(',')%>
}

<% end -%>
<% unless @service_hosts['api-cassandra'].nil? %>
define service {
    service_description Cassandra port 9160
    hostgroup_name      api-cassandra
    check_command       check_tcp!9160
    use                 default-service
    contact_groups      <%=node[:nagios][:default_contact_groups].join(',')%>
}


<% end %>
<% unless @service_hosts['database_master'].nil? -%>
# basic check if the database_master role is a mysql server
# database_master service checks
define service {
		service_description MySQL
		hostgroup_name			database_master
		check_command				check_nrpe!check_mysql_server
		use									default-service
}

<% end -%>

